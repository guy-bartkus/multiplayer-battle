(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.randInt = exports.generatePlayerName = void 0;
var descriptiveList = [
    "Green",
    "Blue",
    "Red",
    "Yellow",
    "Brown",
    "Strong",
    "Miserable",
    "Aloof",
    "Pleasant",
    "Invisible",
    "Smelly",
    "Weird",
    "Pungent",
    "Final",
    "Horrid",
    "Nasty",
    "Euphoric",
    "Trippy",
    "Dazed",
    "Dreamy",
    "Drowsy",
    "Foolish",
    "Crippled",
    "Screaming",
    "Poggers",
    "Flaccid",
    "Rotten",
    "Moist",
    "Simple",
    "Tasty",
    "Venti",
    "Grande",
    "Short",
    "Long",
    "Tall",
    "Seedy",
    "Toothy",
    "Robotic",
    "Feisty",
    "Dirty",
    "Soaked",
    "Squishy",
    "Distant",
    "Noobish",
    "Pwned",
    "Lanky",
    "Peppered",
    "Sad",
    "Moldy",
    "Spicy",
    "Bloody",
    "Cute",
    "Daring",
    "Creepy",
    "Curious",
    "Lazy",
    "Tyrant",
    "Anxious",
    "Adorable",
    "Grabby",
    "Handsy",
    "Panicking",
    "Combative",
    "Annoying",
    "Cryptic",
    "Wheezy",
    "Shady",
    "Thinking",
    "Insane",
    "Loose",
    "Limp",
    "Scary",
    "Furious",
    "Ecstatic",
    "Shady",
    "Derpy",
    "Burnt",
    "Tarnished",
    "Messy",
    "Birthday",
    "Alpha",
    "Beta",
    "Soggy",
    "Siamese",
    "Surprised"
];
var thingList = [
    "Dragon",
    "Poop",
    "Snow",
    "Vampire",
    "Hobo",
    "Jerky",
    "Moose",
    "Banana",
    "Coffee",
    "Monster",
    "Pile",
    "Zombie",
    "Mutant",
    "Boomer",
    "Jello",
    "Milk",
    "Boss",
    "Minion",
    "Pervert",
    "Kebab",
    "Frog",
    "Noob",
    "Nub",
    "Life",
    "Dream",
    "Snek",
    "Lizard",
    "Beetle",
    "Cat",
    "Wheezer",
    "Geezer",
    "Creeper",
    "Beast",
    "Peasant",
    "Thief",
    "Tech",
    "Orange",
    "Bread",
    "Wife",
    "Cuckold",
    "Actor",
    "Artist",
    "Doctor",
    "Monkey",
    "Ghost",
    "Camera",
    "Cookie",
    "Dealer",
    "Chef",
    "Knight",
    "Joker",
    "Blob",
    "Member",
    "Bird",
    "Crumpet",
    "Bagel",
    "Toast",
    "Goose",
    "Potato",
    "Dwarve",
    "Elf",
    "Loner",
    "Wolf",
    "Nerd",
    "Shadow"
];
var numList = [
    42,
    69,
    420,
    666,
    777,
    911,
    5000,
    6969,
    9001
];
var generatePlayerName = function () {
    var desc = descriptiveList[(0, exports.randInt)(0, descriptiveList.length)];
    var thing = thingList[(0, exports.randInt)(0, thingList.length)];
    var num = numList[(0, exports.randInt)(0, numList.length)];
    return "" + desc + thing + num;
};
exports.generatePlayerName = generatePlayerName;
var randInt = function (min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive
};
exports.randInt = randInt;
},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startGame = void 0;
var startup_1 = require("./startup");
var helpers_1 = require("./helpers");
var websocket_1 = require("./modules/websocket");
var siteLoader = document.getElementById('loader');
var camera = document.querySelector('canvas');
var map_canvas = document.createElement('canvas');
var camera_ctx = camera.getContext('2d');
var map_ctx = camera.getContext('2d');
var mouse = {
    x: 0,
    y: 0
};
var renderBubbles = true;
var ws = new WebSocket("ws://" + window.location.host);
ws.addEventListener('message', function (e) {
    e.data.arrayBuffer().then(function (arrayBuffer) {
        (0, websocket_1.decode)(arrayBuffer);
    });
});
function startGame(username) {
    renderBubbles = false;
    (0, websocket_1.initPlayer)(ws, username);
}
exports.startGame = startGame;
camera.addEventListener('mousemove', function (e) {
    var rect = camera.getBoundingClientRect();
    mouse.x = e.clientX - rect.left;
    mouse.y = e.clientY - rect.top;
});
window.addEventListener('resize', function () {
    resize();
});
function resize() {
    camera.width = window.innerWidth;
    camera.height = window.innerHeight;
}
var dots = [];
function addDot() {
    dots.push([
        (0, helpers_1.randInt)(0, 1920),
        (0, helpers_1.randInt)(0, 1080),
        (0, helpers_1.randInt)(-2, 3),
        (0, helpers_1.randInt)(-2, 3),
        (0, helpers_1.randInt)(0, 360),
        1 //Current size
    ]);
    if (renderBubbles)
        setTimeout(addDot, (0, helpers_1.randInt)(50, 200));
}
addDot();
function render() {
    camera_ctx.fillStyle = "#444";
    camera_ctx.fillRect(0, 0, camera.width, camera.height);
    if (renderBubbles) {
        for (var i = 0; i < dots.length; i++) {
            var dot = dots[i];
            camera_ctx.fillStyle = "hsl(" + dot[4] + ", 100%, 50%, " + 0.013333 * (50 - dot[5]) + ")";
            camera_ctx.beginPath();
            camera_ctx.arc(dot[0], dot[1], dot[5], 0, Math.PI * 2);
            camera_ctx.closePath();
            camera_ctx.fill();
            dot[0] += dot[2];
            dot[1] += dot[3];
            dot[5] += 0.5;
            if (dot[5] > 50) {
                dots.splice(i, 1);
            }
        }
    }
    else {
        camera_ctx.fillStyle = "#37bd37";
        camera_ctx.beginPath();
        camera_ctx.arc(mouse.x, mouse.y, 5, 0, Math.PI * 2);
        camera_ctx.fill();
        camera_ctx.closePath();
        camera_ctx.save();
        camera_ctx.setTransform(1, 0, 0, 1, camera.width / 2, camera.height / 2);
        camera_ctx.rotate(Math.atan2(mouse.y - camera.height / 2, mouse.x - camera.width / 2));
        camera_ctx.fillRect(-35, -15, 70, 30);
        camera_ctx.restore();
    }
    requestAnimationFrame(render);
}
(0, startup_1.prepareStartForm)();
resize();
render();
setTimeout(function () {
    siteLoader.classList.add('hidden');
}, 500);
},{"./helpers":1,"./modules/websocket":3,"./startup":4}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initPlayer = exports.decode = void 0;
var MESSAGE_TYPE;
(function (MESSAGE_TYPE) {
    MESSAGE_TYPE[MESSAGE_TYPE["NULL"] = 0] = "NULL";
    MESSAGE_TYPE[MESSAGE_TYPE["INIT"] = 1] = "INIT";
    MESSAGE_TYPE[MESSAGE_TYPE["PLAYER_UPDATE"] = 2] = "PLAYER_UPDATE";
    MESSAGE_TYPE[MESSAGE_TYPE["NEW_PLAYER"] = 3] = "NEW_PLAYER";
})(MESSAGE_TYPE || (MESSAGE_TYPE = {}));
var decode = function (msg) {
    var dv = new DataView(msg);
    var type = dv.getUint8(0);
    switch (type) {
        case MESSAGE_TYPE.INIT:
            console.log("Got INIT from server! Map size: " + dv.getUint16(1));
            break;
    }
};
exports.decode = decode;
var initPlayer = function (socket, name) {
    var message = new ArrayBuffer(1 + name.length);
    var dv = new DataView(message);
    dv.setUint8(0, MESSAGE_TYPE.INIT);
    for (var i = 0; i < name.length; i++) {
        dv.setUint8(i + 1, name.charCodeAt(i));
    }
    socket.send(message);
};
exports.initPlayer = initPlayer;
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareStartForm = void 0;
var helpers_1 = require("./helpers");
var index_1 = require("./index");
var loginOverlay = document.getElementById('login-overlay');
var startButton = document.getElementById('start-game');
var generateNameButton = document.getElementById('generate-name');
var username = document.getElementById('username');
var gameChatContainer = document.getElementById('game-chat');
var gameChatMessage = document.getElementById('message');
var sendMessageButton = document.getElementById('send-message');
var errorDisplayContainer = document.getElementById('error-display');
var errorList = [];
function prepareStartForm() {
    startButton === null || startButton === void 0 ? void 0 : startButton.addEventListener('click', handleStart);
    generateNameButton === null || generateNameButton === void 0 ? void 0 : generateNameButton.addEventListener('click', generateName);
}
exports.prepareStartForm = prepareStartForm;
function generateName() {
    username.value = (0, helpers_1.generatePlayerName)();
    username.classList.remove();
}
function hideStartForm() {
    loginOverlay.classList.add('hidden');
}
function showGameChat() {
    gameChatContainer.classList.remove('hidden');
    sendMessageButton.addEventListener('click', sendMessage);
}
function sendMessage() {
    if (!gameChatMessage.value.trim().length) {
        return;
    }
    var msg = gameChatMessage.value.trim();
    console.log('sending msg', msg);
    gameChatMessage.value = "";
}
function handleStart() {
    username.classList.remove();
    if (!username.value.trim().length) {
        username.value = (0, helpers_1.generatePlayerName)();
    }
    else if (username.value.trim().length > 20) {
        username.classList.add("error");
        return;
    }
    (0, index_1.startGame)(username.value);
    hideStartForm();
    showGameChat();
}
},{"./helpers":1,"./index":2}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
